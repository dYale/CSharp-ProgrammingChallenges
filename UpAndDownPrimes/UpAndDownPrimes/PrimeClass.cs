// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;

public class BeforeAfterPrimes 
{
	public static Boolean IsPrime(long number)
	{
		long boundary = (long)(Math.Floor(Math.Sqrt(number)));
		
		if (number == 1) return false;
		if (number == 2) return true;
		
		for (int i = 2; i <= boundary; ++i)  {
			if (number % i == 0)  return false;
		}
		
		return true;        
	}
	
	public static long[] PrimeBefAft(long num)
	{
		long primeUp = 0;
		long[] result = new long[2];
		long upCounter = num;
		while(primeUp == 0)
		{

			if(BeforeAfterPrimes.IsPrime(upCounter))
			{
				primeUp = upCounter;
				result[0] = upCounter;
			}
			upCounter++;
		}
		long primeDown = 0;
		long downCount = num;
		while(primeDown == 0)
		{
			if(BeforeAfterPrimes.IsPrime(downCount))
			{
				primeDown = num;
				result[1] = downCount;
			}
			downCount--;
		}
		
		return result;
	}
}

